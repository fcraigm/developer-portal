overlay: 1.0.0
info:
  title: Augment documentation
actions:
  - target: $.components.schemas['de.mittwald.v1.database.CreateMySqlDatabase'].properties
    update:
      version:
        description: >
          The MySQL version number for this database, in `<major>.<minor>` format. Use the
          `GET /v2/mysql-version` endpoint to query available versions.
        example: "8.0"
  - target: $.components.schemas['de.mittwald.v1.database.CreateMySqlUser'].properties
    update:
      accessIpMask:
        description: An IP range (in CIDR notation) for which access should be allowed.
        example: "203.0.113.123/32"
      externalAccess:
        description: >
          Describes if users should be able to connection to this database from external
          sources. Defaults to `false` when not set.
      password:
        description: >
          The password for the database user. This password has to comply with the password
          policy specified for MySQL users in the [password security specification](/docs/v2/api/security/passwords#mysql).
  - target: $.components.schemas['de.mittwald.v1.database.CreateMySqlUserWithDatabase'].properties.accessIpMask
    remove: true
  - target: $.components.schemas['de.mittwald.v1.database.CreateMySqlUserWithDatabase'].properties
    update:
      externalAccess:
        description: >
          Describes if users should be able to connection to this database from external
          sources. Defaults to `false` when not set.
      password:
        description: >
          The password for the database user. This password has to comply with the password
          policy specified for MySQL users in the [password security specification](/docs/v2/api/security/passwords#mysql).
  - target: $.components.schemas['de.mittwald.v1.database.characterSettings'].properties
    update:
      characterSet:
        description: A valid MySQL character set
        example: utf8mb4
      collation:
        description: A valid MySQL collation
        example: utf8mb4_general_ci
  - target: $.paths['/v2/mysql-users/{mysqlUserId}/password'].patch.requestBody.content['application/json'].schema.properties.password
    update:
      description: >
        The password for the database user. This password has to comply with the password
        policy specified for MySQL users in the [password security specification](/docs/v2/api/security/passwords#mysql).

  - target: $.paths['/v2/dns-zones/{dnsZoneId}/record-sets/{recordSet}'].put.parameters[?(@.name=="recordSet")]
    update:
      description: >
        The record set to be updated. AAAA records are updated as part of the A record; so use `"a"` as value
        if you want to update your AAAA records. Please also note that the request body schema varies depending on
        which value you provide here.
  - target: $.paths['/v2/dns/zones/{zoneId}/recordset/acombined/custom'].put
    update:
      summary: Updates A records for a specific zone
      description: >
        This operation is deprecated. Use the `PUT /v2/dns/zones/{zoneId}/record-sets/{recordSet}/` endpoint instead.
  - target: $.paths['/v2/dns/zones/{zoneId}/recordset/cname'].put
    update:
      summary: Updates CNAME records for a specific zone
      description: >
        This operation is deprecated. Use the `PUT /v2/dns/zones/{zoneId}/record-sets/{recordSet}/` endpoint instead.
  - target: $.paths['/v2/dns/zones/{zoneId}/recordset/mx/custom'].put
    update:
      summary: Updates MX records for a specific zone
      description: >
        This operation is deprecated. Use the `PUT /v2/dns/zones/{zoneId}/record-sets/{recordSet}/` endpoint instead.
  - target: $.paths['/v2/dns/zones/{zoneId}/recordset/srv'].put
    update:
      summary: Updates SRV records for a specific zone
      description: >
        This operation is deprecated. Use the `PUT /v2/dns/zones/{zoneId}/record-sets/{recordSet}/` endpoint instead.
  - target: $.paths['/v2/dns/zones/{zoneId}/recordset/txt'].put
    update:
      summary: Updates TXT records for a specific zone
      description: >
        This operation is deprecated. Use the `PUT /v2/dns/zones/{zoneId}/record-sets/{recordSet}/` endpoint instead.
  - target: $.paths['/v2/dns/zones/{zoneId}/recordset/acombined/managed/ingress'].post
    update:
      summary: Resets A records to managed for a specific zone
      description: >
        This operation is deprecated. Use the `POST /v2/dns/zones/{zoneId}/record-sets/{recordSet}/actions/set-managed` endpoint instead.
  - target: $.paths['/v2/dns/zones/{zoneId}/recordset/mx/managed'].post
    update:
      summary: Resets A records to managed for a specific zone
      description: >
        This operation is deprecated. Use the `POST /v2/dns/zones/{zoneId}/record-sets/{recordSet}/actions/set-managed` endpoint instead.

  - target: $.paths['/v2/ingresses'].post.requestBody.content['application/json'].schema.properties.paths
    update:
      example:
        - path: /
          target:
            useDefaultPage: true
        - path: /redirect
          target:
            url: https://some-redirect.example
        - path: /path-to-dir
          target:
            directory: /public
        - path: /path-to-app
          target:
            installationId: e1ccfde2-8983-4529-ae66-23a7e34c1177
        - path: /path-to-container
          target:
            container:
              id: ead3223c-6f23-4eaf-8250-392f10b49a35
              portProtocol: 80/tcp
  - target: $.components.schemas['de.mittwald.v1.ingress.TargetUrl']
    update:
      description: Redirect requests to this path to another URL
      properties:
        url:
          description: The URL to which requests should be forwarded.
          example: https://redirect-target.example
  - target: $.components.schemas['de.mittwald.v1.ingress.TargetInstallation']
    update:
      description: Serve a specific app installation
      properties:
        installationId:
          description: The ID of an app installation within the same project to which requests should be forwarded.
  - target: $.components.schemas['de.mittwald.v1.ingress.TargetUseDefaultPage']
    update:
      description: Serve a generic default page
      properties:
        useDefaultPage:
          description: Set this to `true` to serve a generic default site at this path.
  - target: $.components.schemas['de.mittwald.v1.ingress.TargetContainer']
    update:
      description: Forward requests to this path to a specific container.
      properties:
        container:
          descriptions: References a specific port/container combination within the same project.
          properties:
            portProtocol:
              example: 80/tcp

  - target: $.paths['/v2/stacks/{stackId}/services/{serviceId}/actions/pull'].post
    update:
      summary: Pull image and recreate
      description: >
        Pulls the image for this container and recreates it. This is equivalent to running
        `docker-compose pull` and `docker-compose up -d` on the command line.
  - target: $.paths['/v2/stacks/{stackId}'].put.requestBody.content['application/json'].schema.properties.services
    update:
      description: >
        A set of containers that should be started in this stack. The key is relevant for
        network connectivity between containers, because you can use it as DNS name to
        resolve this containers from other containers running in the same project (or from
        managed apps running in the same project).
        
        To **delete** an existing container from a stack using a `PUT` request, simply omit
        it from the request body.
      x-example-key: mysql
  - target: $.paths['/v2/stacks/{stackId}'].patch.requestBody.content['application/json'].schema.properties.services
    update:
      description: >
        A set of containers that should be started in this stack. The key is relevant for
        network connectivity between containers, because you can use it as DNS name to
        resolve this containers from other containers running in the same project (or from
        managed apps running in the same project).
        
        To **delete** an existing container from a stack using a `PATCH` request, set it to
        an empty object `{}`.

  - target: $.paths['/v2/stacks/{stackId}'].put.requestBody.content['application/json'].schema.properties.volumes
    update: &volumeList
      description: >
        A set of named volumes that should be created for this stack. Removing a volume
        from this set will not delete the volume (for safety), but only detach it from the
        stack. To delete a volume, use the `DELETE /stacks/{stackId}/volumes/{volumeId}` endpoint.
      example:
        data:
          name: mysql-volume
  - target: $.paths['/v2/stacks/{stackId}'].patch.requestBody.content['application/json'].schema.properties.volumes
    update: *volumeList

  - target: $.components.schemas['de.mittwald.v1.container.ServiceDeclareRequest'].properties.volumes
    update: &volumes
      description: >
        Volume mounts for this container. These items always follow the format `<volume>:<mountpoint>`.
        The `<volume>` may either be a named volume, or a file path in the (always present) project
        file system (which is shared among containers and managed apps within a project).
      example: # caution, this is APPENDED to the existing examples
        - "/home/p-XXXXX/html:/var/www"
  - target: $.components.schemas['de.mittwald.v1.container.ServiceRequest'].properties.volumes
    update: *volumes

  - target: $.components.schemas['de.mittwald.v1.container.ServiceDeclareRequest'].properties.ports
    update: &ports
      description: >
        Exposed ports. Follows the format `<public-port>:<container-port>/<protocol>`. Exposed ports
        can be accessed from other containers (or managed apps) within the same project. To expose
        a port publicly, connect it with an ingress resource.
  - target: $.components.schemas['de.mittwald.v1.container.ServiceRequest'].properties.ports
    update: *ports

  - target: $.components.schemas['de.mittwald.v1.container.ServiceDeclareRequest'].properties.image
    update: &image
      description: >
        The image to run, in the usual format also used by `docker run` and `docker compose`. When
        the image is pulled from a private registry, make sure to create it first, using the
        `container-create-registry` endpoint. The appropriate registry is matched
        by hostname.
  - target: $.components.schemas['de.mittwald.v1.container.ServiceRequest'].properties.image
    update: *image

  - target: $.components.schemas['de.mittwald.v1.container.ServiceDeclareRequest'].properties.envs
    update: &envs
      description: >
        Key-value map of environment variables that should be passed into the container.
  - target: $.components.schemas['de.mittwald.v1.container.ServiceRequest'].properties.envs
    update: *envs

  - target: $.components.schemas['de.mittwald.v1.container.ServiceDeclareRequest'].properties.entrypoint
    update: &entrypoint
      description: >
        The container entrypoint (equivalent to the [Docker entrypoint](https://docs.docker.com/reference/dockerfile/#entrypoint)).
        When omitted, this defaults to the entrypoint defined in the image.
  - target: $.components.schemas['de.mittwald.v1.container.ServiceRequest'].properties.entrypoint
    update: *entrypoint

  - target: $.components.schemas['de.mittwald.v1.container.ServiceDeclareRequest'].properties.command
    update: &command
      description: >
        The container command (equivalent to the [Docker cmd](https://docs.docker.com/reference/dockerfile/#cmd)).
        When omitted, this defaults to the command defined in the image.
  - target: $.components.schemas['de.mittwald.v1.container.ServiceRequest'].properties.command
    update: *command

  #- target: $.components.schemas['de.mittwald.v1.container.StackResponse'].properties
  #  update:

  - target: $.components.schemas['de.mittwald.v1.container.StackResponse'].properties.services
    update: *serviceList

  - target: $.components.schemas['de.mittwald.v1.container.ServiceResponse'].properties.deployedState
    update:
      description: >
        The actual state of the container that is currently deployed.
  - target: $.components.schemas['de.mittwald.v1.container.ServiceResponse'].properties.pendingState
    update:
      description: >
        The desired state that is waiting to be reconciled.
  - target: $.components.schemas['de.mittwald.v1.container.ServiceResponse'].properties
    update:
      message:
        description: >
          Message explaining the current state of the container. This may contain information about
          the current state of the container, or errors that occurred during deployment.
      shortId:
        description: >
          A short ID of the container. This is a unique identifier for the container within the
          project, and can be used to reference it in other API calls, or for SSH connections.
  - target: $.components.schemas['de.mittwald.v1.container.ServiceResponse'].properties.projectId
    remove: true
  - target: $.components.schemas['de.mittwald.v1.container.ServiceResponse'].properties.stackId
    remove: true

  - target: $.components.schemas['de.mittwald.v1.container.ServiceState'].properties.command
    update:
      <<: *command
      example: ["mysqld"]
  - target: $.components.schemas['de.mittwald.v1.container.ServiceState'].properties.entrypoint
    update:
      <<: *entrypoint
      example: ["docker-entrypoint.sh"]
  - target: $.components.schemas['de.mittwald.v1.container.ServiceState'].properties.envs
    update:
      <<: *envs
      example: {
        "MYSQL_DATABASE": "my_db",
        "MYSQL_PASSWORD": "my_password",
        "MYSQL_ROOT_PASSWORD": "my_root_password",
        "MYSQL_USER": "my_user"
      }
  - target: $.components.schemas['de.mittwald.v1.container.ServiceState'].properties.image
    update:
      <<: *image
      example: "mysql:8.0"
  - target: $.components.schemas['de.mittwald.v1.container.ServiceState'].properties.ports
    update:
      <<: *ports
      example: ["3306:3306/tcp"]
  - target: $.components.schemas['de.mittwald.v1.container.ServiceState'].properties.volumes
    update:
      <<: *volumes
      example: [
        "data:/var/lib/mysql",
        "/home/p-XXXXX/html:/var/www"
      ]